// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model TimeSlot {
  id        String   @id @default(cuid())
  dayOfWeek Int      // 1 = Monday, 7 = Sunday
  startTime String   // "14:00" format
  endTime   String   // "16:00" format  
  duration  Int      // 30 or 60 minutes
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]

  @@map("time_slots")
}

model Appointment {
  id               String            @id @default(cuid())
  name            String
  email           String
  phone           String
  consultationType ConsultationType
  preferredDate   DateTime
  status          AppointmentStatus @default(PENDING)
  notes           String?
  
  // Meeting details
  meetingLink     String?           // Google Meet link
  meetingId       String?           // Meeting ID for reference
  timezone        String?           // Patient's timezone (e.g., "Europe/London", "America/New_York")
  
  // Email tracking
  patientEmailSent Boolean @default(false)
  adminEmailSent   Boolean @default(false)
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id])
  timeSlotId String

  @@map("appointments")
}

enum ConsultationType {
  INJECTIONS
  PILLS
  SURGERY
  GENERAL
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

model RiskAssessment {
  id        String   @id @default(cuid())
  
  // Personal Information
  name      String
  email     String
  phone     String
  
  // Physical Information
  heightFeet    Int?
  heightInches  Int?
  heightCm      Int?
  weightStone   Int?
  weightPounds  Int?
  weightKg      Int?
  unitSystem    String // 'imperial' or 'metric'
  
  // Assessment Data
  responses     Json     // Stores all question responses
  status        AssessmentStatus @default(PENDING)
  
  // Admin Notes
  adminNotes    String?
  reviewedBy    String?
  reviewedAt    DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("risk_assessments")
}

enum AssessmentStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
  REQUIRES_FOLLOWUP
}